<?php
declare (strict_types = 1);

namespace app\common\base;


use app\common\pool\RedisPool;
use app\common\traits\TraitCompressData;
use think\Exception;

/**
 * 延迟队列的任务操作父类
 * Class DelayQueueTaskBase
 * @package app\common\base
 */
class DelayQueueTaskBase
{
    use TraitCompressData;


    protected $db = null;

    public function __construct()
    {
        $this->db = (new HhDb())->init();//数据库调用
    }

    protected function getRedis(){
        $redisPool= RedisPool::getInstance();
        return $redisPool->init($redisPool->setConfig('swoole.pool.redis',[
            'database' => 5,
            'max_active' => 35,
        ]));
    }

    /**
     * 获取任务锁的key和此次可解锁操作的版本号
     * @param $taskItem
     * @return string[]
     */
    protected function getLockKeyVersion($taskItem){
        //任务锁的版本号对上才可手动删除，避免此次任务执行到锁自动失效时，删除了新创建的锁
        if(empty($taskItem['try_times'])){$taskItem['try_times'] = 0;}
        $lock_version= time().'_'.$taskItem['try_times'].'_'.mt_rand(1,1000);

        unset($taskItem['key'], $taskItem['try_times']);//去除该任务中会自动变化的无redis的值
        $key = 'fenxiao:lock:'.md5(json_encode($taskItem,JSON_UNESCAPED_UNICODE));

        return [$key, $lock_version];
    }

    /**
     * 锁中运行任务
     * @param $taskItem //任务值
     * @param int $limit_time //锁的有效时间
     * @param callable $callback
     * @return bool|string
     */
    public function runInLock($taskItem, $limit_time = 5, $callback = null){
            $ok = false;
            try {
                if(!is_callable($callback)){
                    throw new Exception('缺失设置的回调函数');
                }
                $redis = $this->getRedis();
                [$key, $lock_version] = $this->getLockKeyVersion($taskItem);
                unset($taskItem);

                $ok = $redis->set($key, $lock_version, ['nx', 'ex' => $limit_time]);
                $ok==true&&$callback();
            }catch (\Throwable $e){
                throw new Exception($e->getMessage());
            } finally {
                if ($ok==true && ($redis->get($key) == $lock_version)) {//需要版本号对上才可手动删除
                    $redis->del($key);
                }
            }
    }

    public function runBox(){
        $rs = null;
        $args = func_get_args();
        $taskItem = $args[1];
        $is_runed = false;
        try {
            if(!empty($taskItem['try_times'])&&$taskItem['try_times']>6){//超过尝试次数
               /* $r = $this->saveFailLog($taskItem);
                if(!empty($r)){
                    unset($taskItem['key']);//去除无redis的值
                    $taskItem['try_times'] = empty($taskItem['try_times'])?1: intval($taskItem['try_times'])+1;//删除新的重试
                    if($taskItem['try_times']>6){//超过最大错误次数
                        $redis->sRem($taskItem['queue_fail_key'], $this->compressData($taskItem));//删除失败的
                    }else{
                        $redis->zRem($taskItem['queue_again_key'], $this->compressData($taskItem));//删除重试的
                    }
                }*/
                throw new DelayQueueLogException('已到达该任务重试次数上限，请排查问题');
            }

            //$rs = $this->run(...$args);
            $this->runInLock($taskItem,5,function () use($args, $taskItem, &$res){
                $res = $this->run(...$args);
            });
            $rs = $res;
            unset($res);

            if((!empty($taskItem['try_times'])&&$taskItem['try_times']>4)){//超过尝试次数
                $is_runed = true;
                throw new DelayQueueLogException('已到达该任务重试次数上限，请排查问题');
            }
        } catch (DelayQueueLogException $e){

            $r = $this->saveFailLog($taskItem);
            //进行失败日志迁移
            /*if(!empty($r)){
                //先删除延迟队列中的下次等待的操作
                $redis = $this->getRedis();

                unset($taskItem['key']);//去除无redis的值
                $taskItem['try_times'] = empty($taskItem['try_times'])?1: intval($taskItem['try_times'])+1;//删除新的重试
                if($taskItem['try_times']>6){//超过最大错误次数
                    $redis->sRem($taskItem['queue_fail_key'], $this->compressData($taskItem));//删除失败的
                }else{
                    $redis->zRem($taskItem['queue_again_key'], $this->compressData($taskItem));//删除重试的
                }
            }*/
            if($is_runed!==true){
                throw new Exception($e->getMessage());
            }
        } catch (\Throwable $e){
            throw new Exception($e->getMessage());
        } finally {
            //var_dump($rs!==false);

            unset($this->db);
            var_dump($rs);
            return $rs;
        }
    }

    /**
     * @return bool
     */
    public function run() {}

    /**
     * 存入日志操作数据库
     * @param $taskItem
     * @return bool
     */
    public function saveFailLog($taskItem = []){
        echo 'saveFailLog';
        return true;
    }
}


class DelayQueueLogException extends \Exception{
    public function errorMessage(){
        return 'Error on line '.$this->getLine().' in '.$this->getFile().': <b>'.$this->getMessage().'</b> is not a valid E-Mail address';
    }
}
