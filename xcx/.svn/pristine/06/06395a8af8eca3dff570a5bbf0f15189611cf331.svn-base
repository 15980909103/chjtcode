<?php

namespace app\admin\controller;


use app\common\base\AdminBaseController;
use app\common\lib\delayQueue\DelayQueue;
use app\common\manage\TaskManage;



class NotifyController extends AdminBaseController
{

    /**
     * 角色与权限
     */
    protected $RoleAuth = [
        /**
         * 与报备单的联系
         * self:自己 subordinate:下级店员 building:绑定的楼盘 subordinate-building：下级绑定的楼盘 create-store:创建的店铺 subordinate-store:下级绑定的店铺 create-building:创建的楼盘 city:城市
         */
        // 店员（经纪人）
        '0' => [
            'name'=> '店员',
            'duplicate'=> [], //抄送
            'examine' => [],//待处理
            'log'=>[
                1 => ['self'],
                2 => ['self'],
                3 => ['self'],
                4 => ['self'],
                5 => ['self'],
                6 => ['self'],
            ],//日志追加
            'add'=> [1],//添加操作 [报备]
        ],
        // 店长（经纪人）
        '1' => [
            'name'=> '店长',
            'duplicate'=> [
                1 => ['subordinate'],
                2 => ['subordinate'],
                3 => ['subordinate'],
                4 => ['subordinate'],
                5 => ['subordinate'],
                6 => ['subordinate'],
            ], //抄送
            'examine' => [],//待处理
            'log'=>[
                1 => ['self'],
                2 => ['self'],
                3 => ['self'],
                4 => ['self'],
                5 => ['self'],
                6 => ['self'],
            ],//日志追加
            'add'=> [1],//添加操作 [报备]
            'store_manager' => true  //标识店长
        ],
        // 项目经理（原项目经理）
        '2' => [
            'name'=> '项目经理',
            'duplicate'=> [], //抄送
            'examine' => [
                1 => ['building'],
                2 => ['building'],
                3 => ['building'],
            ],//待处理
            'log'=>[
                1 => ['building'],
                2 => ['building'],
                3 => ['building'],
            ],//日志追加
            'add'=> [],//添加操作 [报备]
        ],
        // 项目主管（原项目组长）
        '3' => [
            'name'=> '项目主管',
            'duplicate'=> [
                1 => ['subordinate-building'],
                2 => ['subordinate-building'],
                3 => ['subordinate-building'],
            ], //抄送
            'examine' => [],//待处理
            'log'=>[],//日志追加
            'add'=> [],//添加操作 [报备]
        ],
        // 渠道专员（原渠道组员）
        '5' => [
            'name'=> '渠道专员',
            'duplicate'=> [
                1 => ['create-store'],
                2 => ['create-store'],
                3 => ['create-store'],
                4 => ['create-store'],
                5 => ['create-store'],
                6 => ['create-store'],
            ], //抄送
            'examine' => [
                5 => ['create-store'],
                6 => ['create-store'],
            ],//待处理
            'log'=>[
                5 => ['create-store'],
                6 => ['create-store'],
            ],//日志追加
            'add'=> [],//添加操作 [报备]
        ],
        // 渠道总监（原渠道组长）
        '6' => [
            'name'=> '渠道总监',
            'duplicate'=> [
                1 => ['create-store', 'subordinate-store'],
                2 => ['create-store', 'subordinate-store'],
                3 => ['create-store', 'subordinate-store'],
                4 => ['create-store', 'subordinate-store'],
                5 => ['create-store', 'subordinate-store'],
                6 => ['create-store', 'subordinate-store'],
            ], //抄送
            'examine' => [
                5 => ['create-store'],
                6 => ['create-store'],
            ],//待处理
            'log'=>[
                5 => ['create-store'],
                6 => ['create-store'],
            ],//日志追加
            'add'=> [],//添加操作 [报备]
        ],
        // 项目总监（原项目负责人）
        '7' => [
            'name'=> '项目总监',
            'duplicate'=> [], //抄送
            'examine' => [
                4 => ['create-building']
            ],//待处理
            'log'=>[
                4 => ['create-building']
            ],//日志追加
            'add'=> [],//添加操作 [报备]
        ],
        // 总负责人（原区域负责人）
        '8' => [
            'name'=> '总负责人',
            'duplicate'=> [
                1 => ['city'],
                2 => ['city'],
                3 => ['city'],
                4 => ['city'],
                5 => ['city'],
                6 => ['city'],
            ], //抄送
            'examine' => [],//待处理
            'log'=>[],//日志追加
            'add'=> [],//添加操作 [报备]
        ],
    ];

    //微信通知
    public function DistributionWxMsg(){
        $data = $this->request->param();
        if($data['auth'] = 'Nldo4g59sEkW2v7DCmIOruPc6FAMn'){
            //TaskManage::getInstance()->asyncPost($data['data'],\app\task\Test::class);
            $this->sendTmpMsg($data['data']);
        }
    }

    private function sendTmpMsg($data=[]){
//        if(empty($data['order_no'])){
//            $this->error('抱歉，缺失参数');
//        }
//        if(empty($data['status_type'])){
//            $this->error('抱歉，缺失参数');
//        }

        $data = [];
        $data['order_no'] = 'R202101125710197938308';
        //$step = $data['status_type'];//当前操作的环节

        $step = 2;

        $info = $this->db->name('xcx_building_reported')
            ->alias('xr')
            ->field('xr.*,b.aid as building_aid,b.city,b.name as building_name,xa.agent_name,xa.agent_id,xa.agent_img,xa.agent_openid')
            ->join('xcx_building_building b','xr.building_id=b.id') //楼盘信息
            ->join('xcx_store_agent xa','xa.said=xr.said')     //申请者的一些信息
            ->where([
                'xr.order_no' => $data['order_no']
            ])->find();
        if(empty($info)){
            $this->error('抱歉，找不到该报备申请单');
        }
        print_r($info);

        //找出拥有该环节的角色
        $roles_duplicate = [
            'detail'=>[],
            'detail_roleIds'=>[],
            'roleIds'=>[],
        ];
        $roles_examine = [
            'detail'=>[],
            'detail_roleIds'=>[],
            'roleIds'=>[],
        ];

        //查找 $step 环节内的角色权限配置，$k为角色标识
        foreach ($this->RoleAuth as $k=>$item){
            $duplicate = $this->transforRoles( 'duplicate', $step,  $item, $k); //抄送模块
            if(!empty($duplicate)){
                $roles_duplicate['detail'] = $roles_duplicate['detail']+ $duplicate['detail'];
                $roles_duplicate['detail_roleIds'] = $roles_duplicate['detail_roleIds']+ $duplicate['detail_roleIds'];
                $roles_duplicate['roleIds'] = $roles_duplicate['roleIds']+ $duplicate['roleIds'];
            }

            $examine = $this->transforRoles( 'examine', $step+1,  $item, $k); //审批模块，为下一个环节的人
            if(!empty($examine)){
                $roles_examine['detail'] = $roles_examine['detail']+ $examine['detail'];
                $roles_examine['roleIds'] = $roles_examine['roleIds']+ $examine['roleIds'];
            }
            //$roles['examine'] = $roles['examine']+ $this->transforRoles('examine', 2,  $item, $k);
        }
        print_r($roles_examine);

        //通知需要抄送的人员的openid集
        $openIds = $this->getDuplicateOpenids($roles_duplicate, $info);
        //通知审批权限人员的openid集
        $openIds2 = $this->getExamineOpenids($roles_examine, $info);
        $openIds = $openIds+$openIds2;
        //通知申请人员
        if(empty($openIds[$info['agent_openid']])&&empty($openIds2[$info['agent_openid']])){
            $openIds[$info['agent_openid']] = $info['agent_openid'];
        }

        return $openIds;
    }

    /**
     * 需要s审核的人员的openid集
     * @param $roles_examine
     * @param $info
     * @return array
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     */
    private function getExamineOpenids($roles_examine, $info){
        $openIds = [];
        //通知有 创建楼盘的权限进行审批
        if(!empty($roles_examine['detail']['create-building'])){
            //找出楼盘创建者人员
            $create_building_agents = $this->db->name('xcx_store_agent xa')
                ->field('xa.said,xa.agent_openid')
                ->join('admin a','a.charge_id=xa.said')
                ->where([
                    ['a.id', '=', $info['building_aid']],
                    ['xa.type', 'in', $roles_examine['detail_roleIds']['create-building']]
                ])->find();
            //剔除自己操作的申请，不进行抄送
            if(!empty($create_building_agents)&&$info['said']!=$create_building_agents['said']){
                $openIds[$create_building_agents['agent_openid']] = $create_building_agents['agent_openid'];
            }
        }

        //通知有 绑定楼盘的权限进行审批
        if(!empty($roles_examine['detail_roleIds']['building'])){
            //找出楼盘绑定人员
            $bind_building_agents = $this->db->name('xcx_store_agent')
                ->alias('xa')
                ->field('xa.said,xa.agent_openid,xa.mgid')
                ->join('xcx_manager_building xb','xb.said=xa.said')
                ->whereRaw('find_in_set(:building_id,xb.building_ids)', ['building_id' => $info['building_id'] ])
                ->where([
                    ['xa.type', 'in', $roles_examine['detail_roleIds']['building']]
                ])->select();
            //剔除自己操作的申请，不进行抄送
            foreach ($bind_building_agents as $item){
                if($info['said']!=$item['said']){
                    $openIds[$item['agent_openid']] = $item['agent_openid'];
                }
            }
        }
        return [];

        //通知有 我创建的店铺权限的及其上级进行审批
        if(!empty($roles_duplicate['detail']['create-store'])||!empty($roles_duplicate['detail']['subordinate-store'])){
            //找出店铺创建者,渠道专员 //找出创建店铺的后台账号channel_id关联的said
            if(!empty($roles_duplicate['detail_roleIds']['create-store'])){
                $create_store_agents = $this->db->name('xcx_store_store')
                    ->alias('xs')
                    ->field('xa.said,xa.agent_openid,xa.mgid')
                    ->join('admin a','a.id = xs.aid')
                    ->join('xcx_store_agent xa','xa.said = a.channel_id')
                    ->where([
                        ['xs.id', '=', $info['store_id']],
                        ['type', 'in', $roles_duplicate['detail_roleIds']['create-store']]
                    ])->find();
                //剔除自己操作的申请，不进行抄送
                if(!empty($create_store_agents)&&$info['said']!=$create_store_agents['said']){
                    $openIds[$create_store_agents['agent_openid']] = $create_store_agents['agent_openid'];
                }
            }

            //找出店铺创建者的上级，渠道总监
            /*if(!empty($roles_duplicate['detail']['subordinate-store'])&&!empty($create_store_agents['mgid'])){
                $leader_create_store_agents = $this->db->name('xcx_store_agent')
                    ->field('said,agent_openid')
                    ->where(
                        ['mgid', '=', $create_store_agents['mgid']],
                        ['type', 'in', $roles_duplicate['detail_roleIds']['subordinate-store']]
                    )->select();
                //剔除自己操作的申请，不进行抄送
                foreach ($leader_create_store_agents as $item){
                    if($info['said']!=$item['said']){
                        $openIds[$item['agent_openid']] = $item['agent_openid'];
                    }
                }
            }*/
        }

        return $openIds;
    }

    /**
     * 需要抄送的人员的openid集
     * @param $roles_duplicate //抄送的权限数据
     * @param $info //申请单信息
     * @return array
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     */
    private function getDuplicateOpenids($roles_duplicate, $info){
        $openIds = [];
        //通知有 城市权限的
        if(!empty($roles_duplicate['detail']['city'])){
            $city_agents =  $this->db->name('xcx_store_agent')
                ->field('said,agent_openid')
                ->where([
                    ['city', 'like', '%'.$info['city'].'%'],
                    ['type', 'in', $roles_duplicate['detail_roleIds']]
                ])->select();
            //剔除城市权限自己操作的申请，不进行抄送
            foreach ($city_agents as $item){
                if($info['said']!=$item['said']){
                    $openIds[$item['agent_openid']] = $item['agent_openid'];
                }
            }
        }
        //通知有 我的店员权限的
        if(!empty($roles_duplicate['detail']['subordinate'])){
            //查找出店长
            $store_agents = $this->db->name('xcx_store_agent')
                ->field('said,agent_openid')
                ->where([
                    ['store_id', '=', $info['store_id']],
                    ['type', 'in', $roles_duplicate['detail_roleIds']['subordinate']]
                ])->find();
            //剔除店长自己操作的申请，不进行店长抄送
            if(!empty($store_agents)&&$info['said']!=$store_agents['said']){
                $openIds[$store_agents['agent_openid']] = $store_agents['agent_openid'];
            }
        }

        //通知有 我创建的店铺权限的及其上级
        if(!empty($roles_duplicate['detail']['create-store'])||!empty($roles_duplicate['detail']['subordinate-store'])){
            //找出店铺创建者,渠道专员 //找出创建店铺的后台账号channel_id关联的said
            if(!empty($roles_duplicate['detail_roleIds']['create-store'])){
                $create_store_agents = $this->db->name('xcx_store_store')
                    ->alias('xs')
                    ->field('xa.said,xa.agent_openid,xa.mgid')
                    ->join('admin a','a.id = xs.aid')
                    ->join('xcx_store_agent xa','xa.said = a.channel_id')
                    ->where([
                        ['xs.id', '=', $info['store_id']],
                        ['type', 'in', $roles_duplicate['detail_roleIds']['create-store']]
                    ])->find();
                //剔除自己操作的申请，不进行抄送
                if(!empty($create_store_agents)&&$info['said']!=$create_store_agents['said']){
                    $openIds[$create_store_agents['agent_openid']] = $create_store_agents['agent_openid'];
                }
            }

            //找出店铺创建者的上级，渠道总监
            if(!empty($roles_duplicate['detail']['subordinate-store'])&&!empty($create_store_agents['mgid'])){
                $leader_create_store_agents = $this->db->name('xcx_store_agent')
                    ->field('said,agent_openid')
                    ->where([
                        ['mgid', '=', $create_store_agents['mgid']],
                        ['type', 'in', $roles_duplicate['detail_roleIds']['subordinate-store']]
                    ])->select();
                //剔除自己操作的申请，不进行抄送
                foreach ($leader_create_store_agents as $item){
                    if($info['said']!=$item['said']){
                        $openIds[$item['agent_openid']] = $item['agent_openid'];
                    }
                }
            }
        }

        //通知有 楼盘创建权限的
        if(!empty($roles_duplicate['detail']['create-building'])){
            //找出楼盘创建者人员
            $create_building_agents = $this->db->name('xcx_store_agent xa')
                ->field('xa.said,xa.agent_openid')
                ->join('admin a','a.charge_id=xa.said')
                ->where([
                    ['a.id', '=', $info['building_aid']],
                    ['xa.type', 'in', $roles_duplicate['detail_roleIds']['create-building']]
                ])->find();
            //剔除自己操作的申请，不进行抄送
            if(!empty($create_building_agents)&&$info['said']!=$create_building_agents['said']){
                $openIds[$create_building_agents['agent_openid']] = $create_building_agents['agent_openid'];
            }
        }
        //通知有 绑定楼盘权限及其上级的
        if(!empty($roles_duplicate['detail']['building'])||!empty($roles_duplicate['detail']['subordinate-building'])){
            if(!empty($roles_duplicate['detail_roleIds']['building'])){
                //找出楼盘绑定人员
                $bind_building_agents = $this->db->name('xcx_store_agent')
                    ->alias('xa')
                    ->field('xa.said,xa.agent_openid,xa.mgid')
                    ->join('xcx_manager_building xb','xb.said=xa.said')
                    ->whereRaw('find_in_set(:building_id,xb.building_ids)', ['building_id' => $info['building_id'] ])
                    ->where([
                        ['xa.type', 'in', $roles_duplicate['detail_roleIds']['building']]
                    ])->select();
                //剔除自己操作的申请，不进行抄送
                foreach ($bind_building_agents as $item){
                    if($info['said']!=$item['said']){
                        $openIds[$item['agent_openid']] = $item['agent_openid'];
                    }
                }
            }

            //找出楼盘绑定人员的上级
            if(!empty($roles_duplicate['detail']['subordinate-building'])&&!empty($bind_building_agents['mgid'])){
                $leader_bind_building_agents = $this->db->name('xcx_store_agent xa')
                    ->field('xa.said,xa.agent_openid')
                    ->where([
                        ['mgid', '=', $bind_building_agents['mgid']],
                        ['type', 'in', $roles_duplicate['detail_roleIds']['subordinate-building']]
                    ])->select();

                //剔除自己操作的申请，不进行抄送
                foreach ($leader_bind_building_agents as $item){
                    if($info['said']!=$item['said']){
                        $openIds[$item['agent_openid']] = $item['agent_openid'];
                    }
                }
            }
        }

        return $openIds;
    }



    /**
     * 查找环节内的角色权限设置
     * @param $action //duplicate，examine，log
     * @param $step
     * @param $roleInfo
     * @param $roleId  //角色标识
     * @return array[]
     */
    private function transforRoles($action, $step, $roleInfo, $roleId){
        //self:自己 subordinate:我的店员 building:绑定的楼盘 subordinate-building：下级绑定的楼盘 create-store:创建的店铺 subordinate-store:下级绑定的店铺 create-building:创建的楼盘 city:城市

        $action_step_auths = $roleInfo[$action][$step];//该环节步骤内的权限集合
        if($step-1>=0){
            $before_action_step_auths = $roleInfo[$action][$step-1];
        }

        //print_r($action_step_auths);
        $roleIds = []; $detail_roleIds = [];
        $auths = [
            'subordinate',//我的店员
            'subordinate-store', //下级绑定的店铺
            'building',//我绑定的楼盘
            'subordinate-building',//下级绑定的楼盘
            'create-store', //我创建的店铺
            'create-building', //我创建的楼盘
            'city' //城市
        ];
        $roles = [];
        foreach ($auths as $item){
            if($action=='duplicate'&&$item=='subordinate-building'){//进行抄送时，主管的通知为当前步骤的前一步的权限，即下级a操作完成了进入了下一环节才通知下级a的主管
                if(!empty($before_action_step_auths)&&in_array($item, $before_action_step_auths)){
                    $roles[$item][$roleId] = $roleInfo;
                    $detail_roleIds[$item][$roleId] = $roleId;
                    $roleIds[$roleId] = $roleId;
                }
            }else{
                if(in_array($item, $action_step_auths)){
                    $roles[$item][$roleId] = $roleInfo;
                    $detail_roleIds[$item][$roleId] = $roleId;
                    $roleIds[$roleId] = $roleId;
                }
            }
        }

        return [
            'detail' => $roles,
            'detail_roleIds'=> $detail_roleIds,
            'roleIds'=> $roleIds,
        ];
    }

    //保护期时间到了进行验证
    public function CheckProtection(){
        $data = $this->request->param();
        $data['delay'] = intval($data['delay']);

        if($data['auth'] != 'Nldo4g59sEkW2v7DCmIOruPc6FAMn'){
            $this->error('校验错误');
        }
        if(empty($data['data'])||empty($data['order_no'])||empty($data['status_type'])){
            $this->error('缺失报备订单参数');
        }

        DelayQueue::getInstance()->addTask('checkProtection',$data['delay'],\app\task\CheckProtection::class,$data['data']);
        $this->success();

        //==============test===============//
        //添加延时队列
        /*for ($i=0;$i<26;$i++){
            $data['data']= $i;
            echo $data['data'].'-------------';
            DelayQueue::getInstance()->addTask('checkProtection',$data['delay'],\app\task\CheckProtection::class,$data['data']);
        }*/
        /* echo PHP_EOL;
         for ($i=0;$i<100;$i++){
             $data['data'] = $i;
             echo $data['data'].'-------------';
             DelayQueue::getInstance()->addTask('checkProtection2',$data['delay'],\app\task\CheckProtection::class,$data['data']);
         }
         echo PHP_EOL;
         for ($i=0;$i<100;$i++){
             $data['data'] = $i;
             echo $data['data'].'-------------';
             DelayQueue::getInstance()->addTask('checkProtection3',$data['delay'],\app\task\CheckProtection::class,$data['data']);
         }
         echo PHP_EOL;*/
    }

}
