<?php

namespace app\admin\controller;


use app\common\base\AdminBaseController;
use app\common\lib\delayQueue\DelayQueue;
use app\common\manage\TaskManage;



class NotifyController extends AdminBaseController
{

    /**
     * 角色与权限
     */
    protected $RoleAuth = [
        /**
         * 与报备单的联系
         * self:自己 subordinate:下级店员 building:绑定的楼盘 subordinate-building：下级绑定的楼盘 create-store:创建的店铺 subordinate-store:下级绑定的店铺 create-building:创建的楼盘 city:城市
         */
        // 店员（经纪人）
        '0' => [
            'name'=> '店员',
            'duplicate'=> [], //抄送
            'examine' => [],//待处理
            'log'=>[
                1 => ['self'],
                2 => ['self'],
                3 => ['self'],
                4 => ['self'],
                5 => ['self'],
                6 => ['self'],
            ],//日志追加
            'add'=> [1],//添加操作 [报备]
        ],
        // 店长（经纪人）
        '1' => [
            'name'=> '店长',
            'duplicate'=> [
                1 => ['subordinate'],
                2 => ['subordinate'],
                3 => ['subordinate'],
                4 => ['subordinate'],
                5 => ['subordinate'],
                6 => ['subordinate'],
            ], //抄送
            'examine' => [],//待处理
            'log'=>[
                1 => ['self'],
                2 => ['self'],
                3 => ['self'],
                4 => ['self'],
                5 => ['self'],
                6 => ['self'],
            ],//日志追加
            'add'=> [1],//添加操作 [报备]
            'store_manager' => true  //标识店长
        ],
        // 项目经理（原项目经理）
        '2' => [
            'name'=> '项目经理',
            'duplicate'=> [], //抄送
            'examine' => [
                1 => ['building'],
                2 => ['building'],
                3 => ['building'],
            ],//待处理
            'log'=>[
                1 => ['building'],
                2 => ['building'],
                3 => ['building'],
            ],//日志追加
            'add'=> [],//添加操作 [报备]
        ],
        // 项目主管（原项目组长）
        '3' => [
            'name'=> '项目主管',
            'duplicate'=> [
                1 => ['subordinate-building', 'subordinate-work'],
                2 => ['subordinate-building', 'subordinate-work'],
                3 => ['subordinate-building', 'subordinate-work'],
            ], //抄送
            'examine' => [],//待处理
            'log'=>[],//日志追加
            'add'=> [],//添加操作 [报备]
        ],
        // 渠道专员（原渠道组员）
        '5' => [
            'name'=> '渠道专员',
            'duplicate'=> [
                1 => ['create-store'],
                2 => ['create-store'],
                3 => ['create-store'],
                4 => ['create-store'],
                5 => ['create-store'],
                6 => ['create-store'],
            ], //抄送
            'examine' => [
                5 => ['create-store'],
                6 => ['create-store'],
            ],//待处理
            'log'=>[
                5 => ['create-store'],
                6 => ['create-store'],
            ],//日志追加
            'add'=> [],//添加操作 [报备]
        ],
        // 渠道总监（原渠道组长）
        '6' => [
            'name'=> '渠道总监',
            'duplicate'=> [
                1 => ['create-store', 'subordinate-store'],
                2 => ['create-store', 'subordinate-store'],
                3 => ['create-store', 'subordinate-store'],
                4 => ['create-store', 'subordinate-store'],
                5 => ['create-store', 'subordinate-store', 'subordinate-work'],
                6 => ['create-store', 'subordinate-store', 'subordinate-work'],
            ], //抄送
            'examine' => [
                5 => ['create-store'],
                6 => ['create-store'],
            ],//待处理
            'log'=>[
                5 => ['create-store'],
                6 => ['create-store'],
            ],//日志追加
            'add'=> [],//添加操作 [报备]
        ],
        // 项目总监（原项目负责人）
        '7' => [
            'name'=> '项目总监',
            'duplicate'=> [], //抄送
            'examine' => [
                4 => ['create-building']
            ],//待处理
            'log'=>[
                4 => ['create-building']
            ],//日志追加
            'add'=> [],//添加操作 [报备]
        ],
        // 总负责人（原区域负责人）
        '8' => [
            'name'=> '总负责人',
            'duplicate'=> [
                1 => ['city'],
                2 => ['city'],
                3 => ['city'],
                4 => ['city'],
                5 => ['city'],
                6 => ['city'],
            ], //抄送
            'examine' => [],//待处理
            'log'=>[],//日志追加
            'add'=> [],//添加操作 [报备]
        ],
    ];

    //微信通知
    public function DistributionWxMsg(){
        $data = $this->request->param();
        if($data['auth'] = 'Nldo4g59sEkW2v7DCmIOruPc6FAMn'){
            //TaskManage::getInstance()->asyncPost($data['data'],\app\task\Test::class);
            $this->sendTmpMsg($data['data']);
        }
    }

    private function sendTmpMsg($data=[]){
//        if(empty($data['order_no'])){
//            $this->error('抱歉，缺失参数');
//        }
//        if(empty($data['status_type'])){
//            $this->error('抱歉，缺失参数');
//        }

        $data = [];
        $data['order_no'] = 'R202102025353100585837';
        //$step = $data['status_type'];//当前操作的环节

        $step = 4;

        $info = $this->db->name('xcx_building_reported')
            ->alias('xr')
            ->field('xr.*,b.aid as building_aid,b.city,b.name as building_name,xa.agent_name,xa.agent_id,xa.agent_img,xa.agent_openid')
            ->join('xcx_building_building b','xr.building_id=b.id') //楼盘信息
            ->join('xcx_store_agent xa','xa.said=xr.said')     //申请者的一些信息
            ->where([
                'xr.order_no' => $data['order_no']
            ])->find();
        if(empty($info)){
            $this->error('抱歉，找不到该报备申请单');
        }
        //print_r($info);
        if($step==6&&$info['status_type']==6&&$info['examine_type']==2){//结佣完成了
            $step = 7;
        }

        //找出拥有该环节的角色
        $roles_duplicate = [
            'detail'=>[],
            'detail_roleIds'=>[],
            'roleIds'=>[],
            'step' => $step,
        ];
        $roles_examine = [
            'detail'=>[],
            'detail_roleIds'=>[],
            'roleIds'=>[],
            'step' => $step,
        ];

        //查找 $step 环节内的角色权限配置，$k为角色标识
        foreach ($this->RoleAuth as $k=>$item){
            $this->transforRoles( 'duplicate', $step,  $item, $k, $roles_duplicate); //抄送模块
            if($step = 7){//流程已经完成了无后续审批了
                continue;
            }
            $this->transforRoles( 'examine', $step,  $item, $k, $roles_examine); //审批模块，为下一个环节的人
        }
        //print_r($roles_duplicate['detail_roleIds']);
       // print_r($roles_duplicate['roleIds']);

        //通知需要抄送的人员的openid集
        $openIds = $this->getDuplicateOpenidsOrSaids($roles_duplicate, $info,'said');
        //print_r($openIds);
        //通知审批权限人员的openid集
        $openIds2 = $this->getExamineOpenidsOrSaids($roles_examine, $info,'said');
        //print_r($openIds2);
        $openIds = $openIds+$openIds2;
        //print_r($openIds);

        //通知申请人员
        if(!empty($info['agent_openid'])&&empty($openIds[$info['agent_openid']])&&empty($openIds2[$info['agent_openid']])){
            $openIds[$info['agent_openid']] = $info['agent_openid'];
        }

        return $openIds;
    }

    /**
     * 需要审核的人员的openid集
     * @param $roles_examine
     * @param $info
     * @param $key //类型 openid，said
     * @return array
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     */
    private function getExamineOpenidsOrSaids($roles_examine, $info, $key='openid'){
        $openIds = [];

        //通知有 我创建的店铺权限的及其上级进行审批
        if(!empty($roles_duplicate['detail_roleIds']['create-store'])||!empty($roles_duplicate['detail_roleIds']['subordinate-store'])){
            //找出店铺创建者,渠道专员 //找出创建店铺的后台账号channel_id关联的said
            if(!empty($roles_duplicate['detail_roleIds']['create-store'])){
                $create_store_agents = $this->db->name('xcx_store_store')
                    ->alias('xs')
                    ->field('xa.said,xa.agent_openid,xa.mgid')
                    ->join('admin a','a.id = xs.aid')
                    ->join('xcx_store_agent xa','xa.said = a.channel_id')
                    ->where([
                        ['xs.id', '=', $info['store_id']],
                        ['type', 'in', $roles_duplicate['detail_roleIds']['create-store']]
                    ])->find();
                //剔除自己操作的申请，不进行通知
                if(!empty($create_store_agents)&&$info['said']!=$create_store_agents['said']){
                    if($key=='openid'){
                        $openIds[$create_store_agents['agent_openid']] = $create_store_agents['agent_openid'];
                    }else if($key='said'){
                        $openIds[$create_store_agents['said']] = $create_store_agents['said'];
                    }
                }
            }

            //找出店铺创建者的上级，渠道总监
            /*if(!empty($roles_duplicate['detail_roleIds']['subordinate-store'])&&!empty($create_store_agents['mgid'])){
                $leader_create_store_agents = $this->db->name('xcx_store_agent')
                    ->field('said,agent_openid')
                    ->where(
                        ['mgid', '=', $create_store_agents['mgid']],
                        ['type', 'in', $roles_duplicate['detail_roleIds']['subordinate-store']]
                    )->find();
                //剔除自己操作的申请，不进行通知
                if(!empty($leader_create_store_agents)&&$info['said']!=$leader_create_store_agents['said']){
                    if($key=='openid'){
                        $openIds[$leader_create_store_agents['agent_openid']] = $leader_create_store_agents['agent_openid'];
                    }else{
                        $openIds[$leader_create_store_agents['said']] = $leader_create_store_agents['said'];
                    }
                }
            }*/
        }

        //通知有 创建楼盘的权限进行审批
        if(!empty($roles_examine['detail_roleIds']['create-building'])){
            //找出楼盘创建者人员
            $create_building_agents = $this->db->name('xcx_store_agent')
                ->alias('xa')
                ->field('xa.said,xa.agent_openid')
                ->join('admin a','a.charge_id=xa.said')
                ->where([
                    ['a.id', '=', $info['building_aid']],
                    ['xa.type', 'in', $roles_examine['detail_roleIds']['create-building']]
                ])->find();
            //剔除自己操作的申请，不进行抄送
            if(!empty($create_building_agents)&&$info['said']!=$create_building_agents['said']){
                if($key=='openid'){
                    $openIds[$create_building_agents['agent_openid']] = $create_building_agents['agent_openid'];
                }else if($key='said'){
                    $openIds[$create_building_agents['said']] = $create_building_agents['said'];
                }
            }
        }

        //通知有 绑定楼盘的权限进行审批
        if(!empty($roles_examine['detail_roleIds']['building'])){
            //找出楼盘绑定人员
            $bind_building_agents = $this->db->name('xcx_store_agent')
                ->alias('xa')
                ->field('xa.said,xa.agent_openid,xa.mgid')
                ->join('xcx_manager_building xb','xb.said=xa.said')
                ->whereRaw('find_in_set(:building_id,xb.building_ids)', ['building_id' => $info['building_id'] ])
                ->where([
                    ['xa.type', 'in', $roles_examine['detail_roleIds']['building']]
                ])->find();
            //剔除自己操作的申请，不进行通知
            if(!empty($bind_building_agents)&&$info['said']!=$bind_building_agents['said']){
                if($key=='openid'){
                    $openIds[$bind_building_agents['agent_openid']] = $bind_building_agents['agent_openid'];
                }else if($key='said'){
                    $openIds[$bind_building_agents['said']] = $bind_building_agents['said'];
                }
            }
        }

        return $openIds;
    }

    /**
     * 需要抄送的人员的openid集
     * @param $roles_duplicate //抄送的权限数据
     * @param $info //申请单信息
     * @param $key //类型 openid，said
     * @return array
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     */
    private function getDuplicateOpenidsOrSaids($roles_duplicate, $info, $key='openid'){
        $openIds = [];
        //通知有 城市权限的
        if(!empty($roles_duplicate['detail_roleIds']['city'])){
            $city_agents =  $this->db->name('xcx_store_agent')
                ->field('said,agent_openid')
                ->where([
                    ['city', 'like', '%'.$info['city'].'%'],
                    ['type', 'in', $roles_duplicate['detail_roleIds']['city']]
                ])->select();
            //剔除城市权限自己操作的申请，不进行抄送
            foreach ($city_agents as $item){
                if($info['said']!=$item['said']){
                    if($key=='openid'){
                        $openIds[$item['agent_openid']] = $item['agent_openid'];
                    }else{
                        $openIds[$item['said']] = $item['said'];
                    }
                }
            }
        }
        //通知有 我的店员权限的
        if(!empty($roles_duplicate['detail_roleIds']['subordinate'])){
            //查找出店长
            $store_agents = $this->db->name('xcx_store_agent')
                ->field('said,agent_openid')
                ->where([
                    ['store_id', '=', $info['store_id']],
                    ['type', 'in', $roles_duplicate['detail_roleIds']['subordinate']]
                ])->find();
            //剔除店长自己操作的申请，不进行店长抄送
            if(!empty($store_agents)&&$info['said']!=$store_agents['said']){
                if($key=='openid'){
                    $openIds[$store_agents['agent_openid']] = $store_agents['agent_openid'];
                }else{
                    $openIds[$store_agents['said']] = $store_agents['said'];
                }
            }
        }

        //通知有 我创建的店铺权限的及其上级
        if(!empty($roles_duplicate['detail_roleIds']['create-store'])||!empty($roles_duplicate['detail_roleIds']['subordinate-store'])){
            //找出店铺创建者,渠道专员 //找出创建店铺的后台账号channel_id关联的said
            if(!empty($roles_duplicate['detail_roleIds']['create-store'])){
                $create_store_agents = $this->db->name('xcx_store_store')
                    ->alias('xs')
                    ->field('xa.said,xa.agent_openid,xa.mgid')
                    ->join('admin a','a.id = xs.aid')
                    ->join('xcx_store_agent xa','xa.said = a.channel_id')
                    ->where([
                        ['xs.id', '=', $info['store_id']],
                        ['type', 'in', $roles_duplicate['detail_roleIds']['create-store']]
                    ])->find();
                //剔除自己操作的申请，不进行抄送
                if(!empty($create_store_agents)&&$info['said']!=$create_store_agents['said']){
                    if($key=='openid'){
                        $openIds[$create_store_agents['agent_openid']] = $create_store_agents['agent_openid'];
                    }else{
                        $openIds[$create_store_agents['said']] = $create_store_agents['said'];
                    }
                }
            }

            //找出店铺创建者的上级，渠道总监
            if(!empty($roles_duplicate['detail_roleIds']['subordinate-store'])&&!empty($create_store_agents['mgid'])){
                $leader_create_store_agents = $this->db->name('xcx_store_agent')
                    ->field('said,agent_openid')
                    ->where([
                        ['mgid', '=', $create_store_agents['mgid']],
                        ['type', 'in', $roles_duplicate['detail_roleIds']['subordinate-store']]
                    ])->find();
                //剔除自己操作的申请，不进行抄送
                if(!empty($leader_create_store_agents)&&$info['said']!=$leader_create_store_agents['said']){
                    if($key=='openid'){
                        $openIds[$leader_create_store_agents['agent_openid']] = $leader_create_store_agents['agent_openid'];
                    }else{
                        $openIds[$leader_create_store_agents['said']] = $leader_create_store_agents['said'];
                    }
                }
            }
        }

        //通知有 楼盘创建权限的
        if(!empty($roles_duplicate['detail_roleIds']['create-building'])){
            //找出楼盘创建者人员
            $create_building_agents = $this->db->name('xcx_store_agent')
                ->alias('xa')
                ->field('xa.said,xa.agent_openid')
                ->join('admin a','a.charge_id=xa.said')
                ->where([
                    ['a.id', '=', $info['building_aid']],
                    ['xa.type', 'in', $roles_duplicate['detail_roleIds']['create-building']]
                ])->find();
            //剔除自己操作的申请，不进行抄送
            if(!empty($create_building_agents)&&$info['said']!=$create_building_agents['said']){
                if($key=='openid'){
                    $openIds[$create_building_agents['agent_openid']] = $create_building_agents['agent_openid'];
                }else{
                    $openIds[$create_building_agents['said']] = $create_building_agents['said'];
                }
            }
        }

        //通知有 绑定楼盘权限及其上级的
        if(!empty($roles_duplicate['detail_roleIds']['building'])||!empty($roles_duplicate['detail_roleIds']['subordinate-building'])){
            if(!empty($roles_duplicate['detail_roleIds']['building'])){
                //找出楼盘绑定人员
                $bind_building_agents = $this->db->name('xcx_store_agent')
                    ->alias('xa')
                    ->field('xa.said,xa.agent_openid,xa.mgid')
                    ->join('xcx_manager_building xb','xb.said=xa.said')
                    ->whereRaw('find_in_set(:building_id,xb.building_ids)', ['building_id' => $info['building_id'] ])
                    ->where([
                        ['xa.type', 'in', $roles_duplicate['detail_roleIds']['building']]
                    ])->find();
                //剔除自己操作的申请，不进行抄送
                if(!empty($bind_building_agents)&&$info['said']!=$bind_building_agents['said']){
                    if($key=='openid'){
                        $openIds[$bind_building_agents['agent_openid']] = $bind_building_agents['agent_openid'];
                    }else{
                        $openIds[$bind_building_agents['said']] = $bind_building_agents['said'];
                    }
                }
            }

            //找出楼盘绑定人员的上级
            if(!empty($roles_duplicate['detail_roleIds']['subordinate-building'])&&!empty($bind_building_agents['mgid'])){
                $leader_bind_building_agents = $this->db->name('xcx_store_agent')
                    ->alias('xa')
                    ->field('xa.said,xa.agent_openid')
                    ->where([
                        ['xa.mgid', '=', $bind_building_agents['mgid']],
                        ['xa.type', 'in', $roles_duplicate['detail_roleIds']['subordinate-building']]
                    ])->find();

                //剔除自己操作的申请，不进行抄送
                if(!empty($leader_bind_building_agents)&&$info['said']!=$leader_bind_building_agents['said']){
                    if($key=='openid'){
                        $openIds[$leader_bind_building_agents['agent_openid']] = $leader_bind_building_agents['agent_openid'];
                    }else{
                        $openIds[$leader_bind_building_agents['said']] = $leader_bind_building_agents['said'];
                    }
                }
            }
        }

        //下级审批后进行上级抄送通知
        if(!empty($roles_duplicate['detail_roleIds']['subordinate-work'])){
            //找出下级审批操作的人
            $sub_agent = $this->db->name('xcx_store_agent')
                ->alias('xa')
                ->field('xa.said,xa.agent_openid,xa.mgid,xa.type')
                ->join('xcx_reported_log xl','xl.examine_said=xa.said')
                ->where([
                    ['xl.report_id', '=', $info['id']],
                ]);
            if($roles_duplicate['step']==7){//流程完成了，为虚拟出的新流程做下转化
                $sub_agent = $sub_agent->where([
                    ['xl.status_type', '=', '6'],
                    ['xl.examine_type', '=', '2']
                ])->find();
            }else{
                $sub_agent = $sub_agent->where([
                    ['xl.status_type', '=', $roles_duplicate['step']],
                ])->find();
            }
            //排除是自己的审批不进行抄送
            if(!empty($sub_agent['type'])&&!in_array($sub_agent['type'],$roles_duplicate['detail_roleIds']['subordinate-work'])){
                //根据操作人员组找出上级
                $leader_examine_work_agents = $this->db->name('xcx_store_agent')
                    ->alias('xa')
                    ->field('xa.said,xa.agent_openid')
                    ->where([
                        ['mgid','=',$sub_agent['mgid']],
                        ['xa.type', 'in', $roles_duplicate['detail_roleIds']['subordinate-work']]
                    ])->find();
                //剔除自己操作的申请和自己的审批，不进行抄送
                if(!empty($leader_examine_work_agents)&&$info['said']!=$leader_examine_work_agents['said']){
                    if($key=='openid'){
                        $openIds[$leader_examine_work_agents['agent_openid']] = $leader_examine_work_agents['agent_openid'];
                    }else{
                        $openIds[$leader_examine_work_agents['said']] = $leader_examine_work_agents['said'];
                    }
                }

                print_r($this->db->getLastSql());
            }
        }

        return $openIds;
    }



    /**
     * 查找环节内对应可操作模块的角色集合
     * @param $action //duplicate，examine，log
     * @param $step
     * @param $roleInfo
     * @param $roleId  //角色标识
     * @param $res  //返回值
     * @return array[]
     */
    private function transforRoles($action, $step, $roleInfo, $roleId, &$res){
        //self:自己 subordinate:我的店员 building:绑定的楼盘 subordinate-building：下级绑定的楼盘 create-store:创建的店铺 subordinate-store:下级绑定的店铺 create-building:创建的楼盘 city:城市
        //echo $step.PHP_EOL;

        $action_step_auths = $roleInfo[$action][$step];//某一个模块该环节步骤内的权限集合
        if($step>1){
            $before_action_step_auths = $roleInfo[$action][$step-1];
        }
        print_r($before_action_step_auths);

        $auths = [
            'subordinate',//我的店员
            'subordinate-store', //下级绑定的店铺
            'building',//我绑定的楼盘
            'subordinate-work',//下级的审批操作
            'subordinate-building',//下级绑定的楼盘
            'create-store', //我创建的店铺
            'create-building', //我创建的楼盘
            'city' //城市
        ];

        foreach ($auths as $item){
            if($action=='duplicate'&&$item=='subordinate-work'){//进行抄送时，主管的通知为当前步骤的前一步的权限，即下级a的审批完成了进入了下一环节才通知下级a的主管
                if(!empty($before_action_step_auths)&&in_array($item, $before_action_step_auths)){
                    $res['detail'][$item][$roleId] = $roleInfo;
                    $res['detail_roleIds'][$item][$roleId] = $roleId;
                    $res['roleIds'][$roleId] = $roleId;
                }
            }else{
                if(in_array($item, $action_step_auths)){
                    $res['detail'][$item][$roleId] = $roleInfo;
                    $res['detail_roleIds'][$item][$roleId] = $roleId;
                    $res['roleIds'][$roleId] = $roleId;
                }
            }
        }
    }

    //保护期时间到了进行验证
    public function CheckProtection(){
        $data = $this->request->param();
        $data['delay'] = intval($data['delay']);

        if($data['auth'] != 'Nldo4g59sEkW2v7DCmIOruPc6FAMn'){
            $this->error('校验错误');
        }
        if(empty($data['data'])||empty($data['data']['order_no'])||empty($data['data']['status_type'])){
            $this->error('缺失报备订单参数');
        }

        DelayQueue::getInstance()->addTask('checkProtection',$data['delay'],\app\task\CheckProtection::class,$data['data']);
        $this->success();

        //==============test===============//
        //添加延时队列
        /*for ($i=0;$i<26;$i++){
            $data['data']= $i;
            echo $data['data'].'-------------';
            DelayQueue::getInstance()->addTask('checkProtection',$data['delay'],\app\task\CheckProtection::class,$data['data']);
        }*/
        /* echo PHP_EOL;
         for ($i=0;$i<100;$i++){
             $data['data'] = $i;
             echo $data['data'].'-------------';
             DelayQueue::getInstance()->addTask('checkProtection2',$data['delay'],\app\task\CheckProtection::class,$data['data']);
         }
         echo PHP_EOL;
         for ($i=0;$i<100;$i++){
             $data['data'] = $i;
             echo $data['data'].'-------------';
             DelayQueue::getInstance()->addTask('checkProtection3',$data['delay'],\app\task\CheckProtection::class,$data['data']);
         }
         echo PHP_EOL;*/
    }

}
