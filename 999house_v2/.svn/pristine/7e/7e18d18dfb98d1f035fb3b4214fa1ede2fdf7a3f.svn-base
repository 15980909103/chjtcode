<template>
  <div class="mapmange_container">
    <div class="mapmange_content">
      <el-form :inline="true" :model="searchData" class="form-serch">
        <el-form-item label="类别选择">
          <el-cascader
            :options="categoryList"
            v-model="searchData.cate_id"
            :props="{
                     value:'id',
                     label:'title'
                    }"
            :show-all-levels="false"
          ></el-cascader>
        </el-form-item>

        <el-form-item>
          <el-input v-model="searchData.name" placeholder="请输入文章名称" prefix-icon="el-icon-search"></el-input>
        </el-form-item>
        <el-form-item label="状态">
          <el-select v-model="searchData.status" placeholder="请选择">
            <el-option label="全部" value="-1"></el-option>
            <el-option label="已启用" value="1"></el-option>
            <el-option label="已禁用" value="0"></el-option>
            <el-option label="草稿" value="2"></el-option>
          </el-select>
        </el-form-item>
        <el-form-item>
          <el-button type="primary" icon="el-icon-search" @click="onSerch">查询</el-button>
        </el-form-item>
        <el-form-item>
          <el-button type="danger" icon="el-icon-circle-plus-outline" @click="openPage({url:'/news/edit' })">新增</el-button>
        </el-form-item>
      </el-form>

      <!-- ========================================================= -->
      <el-table :data="tableData" style="width: 100%">
        <el-table-column prop="id" label="ID" width="80" align="center"></el-table-column>
        <el-table-column prop="icon" label="封面图" width="150" align="center">
          <template slot-scope="scope">
             <img style="width:110px; height:110px;" :src="getRealImgUrl(scope.row.cover)"/>
          </template>
        </el-table-column>
        <el-table-column prop="name" label="名称" width="190" align="center"></el-table-column>
        <el-table-column label="统计信息" align="center">
          <template slot-scope="scope">
             <el-popover trigger="hover" placement="top">
              <span>
                <div>真实阅读数：<el-tag class="count" effect="plain" size="mini">{{(scope.row && scope.row.num_read_real)? format9999Num(scope.row.num_read_real): 0}}</el-tag></div>
                <div>真实收藏数：<el-tag class="count" effect="plain" size="mini">{{(scope.row && scope.row.num_collect_real)? format9999Num(scope.row.num_collect_real): 0}}</el-tag></div>
                <div>真实转发数：<el-tag class="count" effect="plain" size="mini">{{(scope.row && scope.row.num_share_real)? format9999Num(scope.row.num_share_real): 0}}</el-tag></div>
                <div>真实点赞数：<el-tag class="count" effect="plain" size="mini">{{(scope.row && scope.row.num_thumbup_real)? format9999Num(scope.row.num_thumbup_real): 0}}</el-tag></div>
              </span>
              <div slot="reference" class="name-wrapper">
                <span>
                  <div>阅读数：<el-tag class="count" effect="plain" size="mini">{{(scope.row && scope.row.num_read)? format9999Num(scope.row.num_read): 0}}</el-tag></div>
                  <div>收藏数：<el-tag class="count" effect="plain" size="mini">{{(scope.row && scope.row.num_collect)? format9999Num(scope.row.num_collect): 0}}</el-tag></div>
                  <div>转发数：<el-tag class="count" effect="plain" size="mini">{{(scope.row && scope.row.num_share)? format9999Num(scope.row.num_share): 0}}</el-tag></div>
                  <div>点赞数：<el-tag class="count" effect="plain" size="mini">{{(scope.row && scope.row.num_thumbup)? format9999Num(scope.row.num_thumbup): 0}}</el-tag></div>
                </span>
              </div>
            </el-popover>
          </template>
        </el-table-column>

        <el-table-column prop="create_time" label="发布时间" width="150" align="center">
          <template slot-scope="scope">
             {{formatDate(scope.row.release_time)}}
          </template>
        </el-table-column>

        <el-table-column label="发布状态" width="80" align="center">
          <template slot-scope="scope">
            <el-tag v-if= "scope.row.status1 == 2" type="info" >草稿 </el-tag>
            <el-switch v-else @change='(val)=>{switchChange(scope.row.id,val,scope.row.p_cate_id)}' v-model="scope.row.status" :active-value="1" :inactive-value="0" ></el-switch>
          </template>
        </el-table-column>

        <el-table-column label="排序" width="120" align="center">
          <template slot-scope="scope">
             <el-input v-model="scope.row.sort" @change="(val)=>{sortChange(scope.row.id,val,scope.row.p_cate_id)}" placeholder="越大越靠前" size="medium"></el-input>
          </template>
        </el-table-column>

        <el-table-column label="操作"  align="center">
          <template slot-scope="scope">
            <el-button type="primary" size="mini" @click="openPage({url:'/news/edit',data:{p_cate_id:scope.row.p_cate_id,id:scope.row.id}})">编辑</el-button>

            <el-button type="danger" size="mini" @click="doDel(scope.row.id,scope.row.p_cate_id)">删除</el-button>
          </template>
        </el-table-column>
      </el-table>
      <!-- ========================================================= -->

      <!-- ============分页=============== -->
      <pagination-box :pagination="pagination" @pageChange="pageChange" ></pagination-box>
    </div>

  </div>
</template>
<script>
var util = require("@/utils/util.js");
import paginationBox from '@/components/common/pagination.vue';
export default {
  components: {
			'pagination-box': paginationBox,
	},
  data() {
    return {
      searchData: {//  搜索数据
        cate_id:[9,'all'],
        name: "",
        status: "-1",//全部
      },
      categoryList:[],
      page_loading : false,
      tableData: [],
      // cate_id:['all','全部'],
      pagination: {}, //分页数据
    };
  },
  created: function(){
    this.getCategoryList()
    this.getList(this.searchData)
  },
  methods: {
    getList(searchdata={}){
      var that = this
      if(that.page_loading){
          return
      }
      that.page_loading = true

      util.requests("post", {
          url: "news/getList",
          data: searchdata
      }).then(res => {
          that.page_loading = false
          if(res.code==1){
            that.setDataArr({
              tableData : res.data.list,
              pagination : {
                page : res.data.current_page,
                pagecount : res.data.last_page,
                pagesize : Math.ceil(res.data.total / res.data.last_page)
              }
            })
          }else{
            util.Message.error(res.msg);
          }
      });
    },
    onSerch() {
      //console.log("查询",this.searchData);

      this.getList(this.searchData)
    },
    //分页操作
    pageChange: function(page) {
      let post_data = Object.assign({},this.searchData);
      post_data.page = page;
      this.getList(post_data)
    },

    getCategoryList(){
      var that = this

      util.requests("post", {
          url: "news/getCategoryListAll",
          data:{pid:9}
      }).then(res => {
          if(res.code==1){
            that.setDataArr({
              categoryList : res.data,
            })
            let arr = new Array()
            arr['id']   = 'all'
            arr['title'] = "全部"
            that.categoryList[0].children.unshift(arr);
          }else{
            util.Message.error(res.msg);
          }
      });
    },
    getRealImgUrl(url){
      return this.$getRealImgUrl(url)
    },
    format9999Num(val){
      if(val){
        if(val>9999){
          val = '9999 +'
        }
        return val
      }else{
        return 0
      }
    },
    formatDate(val){
     return util.DataFun.getFormatDate(val,2)
    },

    doDel(id,p_cate_id){
      var that = this
      that.$confirm('是否删除此条记录?', '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      }).then(() => {
        if(that.page_loading){
            return
        }
        that.page_loading = true
        util.requests("post", {
            url: "news/del",
            data: {id: id,p_cate_id:p_cate_id}
          }).then(res => {
            that.page_loading = false
            if(res.code==1){
              that.onSerch()
              util.Message.success('操作成功');
            }else{
              util.Message.error(res.msg);
            }
        });
      }).catch(() => {
         //console.log('取消')
      });
    },
    sortChange(id,val,p_cate_id){
      var that = this
      if (parseFloat(val).toString() == 'NaN') {
        util.Message.error('排序必须是数字');
  　　　return false;
  　　}

      if(that.page_loading){
          return
      }
      that.page_loading = true

      util.requests("post", {
          url: "news/changeSort",
          data: {id: id,sort: val,p_cate_id:p_cate_id}
        }).then(res => {
          that.page_loading = false
          if(res.code==1){

            util.Message.success('操作成功');
          }else{
            util.Message.error(res.msg);
          }
        that.onSerch()
      });
    },
    switchChange(id,val,p_cate_id){
      //console.log(id,val)
      var that = this
      if(that.page_loading){
          return
      }
      that.page_loading = true

      util.requests("post", {
          url: "news/enable",
          data: {id: id,status: val,p_cate_id:p_cate_id}
        }).then(res => {
          that.page_loading = false
          if(res.code==1){

            util.Message.success('操作成功');
          }else{
            util.Message.error(res.msg);
          }
        that.onSerch()
      });
    },


    openPage: util.openPage
  }
};
</script>
<style lang="scss" scoped>
.mapmange_container {
  min-height: calc(100vh - 50px);
  background: #f0f2f5;
  padding-top: 20px;
  .mapmange_content {
    background: #fff;
    min-height: calc(100vh - 90px);
    border-radius: 2px;
    padding: 20px 10px;
    .form-serch {
      text-align: right;
      .el-input {
        width: 300px;
      }
      .el-select {
        width: 150px;
      }
    }
  }
  .count{
    width: 50px;
    margin-bottom: 5px;
  }
  .pagination {
    margin-top: 20px;
    text-align: right;
  }
}
</style>
