
//全局混入操作
let initLifeCycle = {
	canNextFailMsging: false,//可以往下执行时的信息提醒中的标识，防抖处理
	whitePages: null,
	vueBaseObj : null, //用于获取为mixin混入的对象
	initLaunched_ok: null, //是否已经myLaunched完成
	initOnLoaded_ok: null, //是否已经myOnLoaded完成
	initLifeCycleHooked_ok: null, //是否已经改写完生命周期
	initLaunched: function(){
		//console.log('initLaunched')
		let ta = this;
		return new Promise((resolve,reject)=>{
			if(ta.initLaunched_ok!=1){
				ta.initLaunched_ok = resolve//第一次myLaunched挂起
			}else{
				resolve();
			}
		})
	},
	initLifeCycleHooked: function(){
		//console.log('initLifeCycleHooked')
		let ta = this;
		return new Promise((resolve,reject)=>{
			if(ta.initLifeCycleHooked_ok!=1){
				ta.initLifeCycleHooked_ok = resolve//第一次myLifeCycleHooked挂起
			}else{
				resolve()
			}
		})
	},
	initLoaded: function(){
		//console.log('initLoaded')
		let ta = this;
		return new Promise((resolve,reject)=>{
			if(ta.initOnLoaded_ok!=1){
				ta.initOnLoaded_ok = resolve//第一次myLoaded挂起
			}else{
				resolve()
			}
		})
	},
	onMyInitEvent: function(){
		//console.log('onMyInitEvent')
		let ta = this
		//监听改写生命周期的初始化完成
		uni.$once('myLifeCycleHooked',function(res){
			//console.log('myLifeCycleHooked');
	
			if(typeof ta.initLifeCycleHooked_ok == 'function'){
				ta.initLifeCycleHooked_ok(); //已经生命周期改写完成
			}
			ta.initLifeCycleHooked_ok = 1;
		})
		//监听启动完成
		uni.$once('myLaunched',async function(res){
			//console.log('myLaunched');
			
			await initLifeCycle.initLifeCycleHooked();//等待改写生命周期的初始化 
			if(typeof ta.initLaunched_ok == 'function'){
				ta.initLaunched_ok();//已经myLaunched完成
			}
			ta.initLaunched_ok = 1;
		});
		//监听onload完成
		uni.$once('myLoaded',function(res){
			//console.log('myLoaded');
			
			if(typeof ta.initOnLoaded_ok == 'function'){
				ta.initOnLoaded_ok();//已经myLoaded完成
			}
			ta.initOnLoaded_ok = 1;
		})
	},
	onMyLoad: async function(that,args){
		//console.log('onMyLoad')
		
		this.vueBaseObj = new that.$options._base();
		let page_onLoad_idx = this.vueBaseObj.$options.onLoad.length;
		let original_onLoad = null;
		if(page_onLoad_idx&&that.$options.onLoad[page_onLoad_idx]){
			original_onLoad = that.$options.onLoad[page_onLoad_idx];
			if(!that.$options.ishookOnLoad){
				that.$options.onLoad[page_onLoad_idx] = async function(){
					await initLifeCycle.initLaunched();//等待onLaunch完成
					let can = await initLifeCycle.canNext(that);
					//console.log(can)
					if(can == true){
						original_onLoad.apply(that,args);
						uni.$emit('myLoaded', 'ok');//执行OnLoaded事件
					}
				};
				that.$options.ishookOnLoad = 1;//标识已改写
			}
		}
	},
	onMyShow: async function(that,args){
		//console.log('onMyShow')
		
		if(!this.vueBaseObj){
			this.vueBaseObj = new that.$options._base();
		}
		let page_onShow_idx = this.vueBaseObj.$options.onShow.length;
		let original_onShow = null;
		this.vueBaseObj = null;
		if(page_onShow_idx&&that.$options.onShow[page_onShow_idx]){
			if(!that.$options.ishookOnShow){
				original_onShow = that.$options.onShow[page_onShow_idx];
				that.$options.onShow[page_onShow_idx] = async function(){ 
					await initLifeCycle.initLoaded();//等待onLoad完成
					original_onShow.apply(that,args);
				};
				that.$options.ishookOnShow = 1;//标识已改写
			}
		}
		uni.$emit('myLifeCycleHooked', 'ok');//执行生命周期改成完成事件
	},
	canNext: async function(that){
		let ta = this;
		return new Promise((resolve,reject)=>{
			let app = getApp()
			if(!ta.whitePages){
				ta.whitePages = app.globalData.whitePages;
			}
			
			let whiteAlertMsg = [
				"pages/my/index",
			];//不弹窗提示的白名单
			
			let pages = getCurrentPages();
			let route = pages[pages.length-1].route;//当前页面路由
			let route_fullPath = pages[pages.length-1].$page.fullPath;//当前页面路由含页面参数
			let res = ta.whitePages.includes(route)==true||that.isLogin()==true;
			if(res == false){//进行提示操作
				if(ta.canNextFailMsging == true||whiteAlertMsg.includes(route)==true||pages.length<=1){//判断页面栈中只有一个页面的时候不弹出
					return
				}
				ta.canNextFailMsging = true;
				setTimeout(()=>{
					ta.canNextFailMsging = false;
				},100);
				// uni.showModal({
				// 	title: '提示',
				// 	content: '请先进行登录',
				// 	success: function(rs){
				// 		if(rs.confirm==true){
				// 			app.globalData.restopen = route_fullPath;
				// 			that.goPage('authorize/index','','redirectTo');
				// 		}
				// 		if(rs.cancel==true){
				// 			that.goPage(-1);
				// 		}
				// 	},
				// 	fail: function(){
				// 		that.goPage(-1);
				// 	}
				// });
				
				app.globalData.restopen = route_fullPath;
				uni.redirectTo({
					url: '/pages/authorize/index'
				})
			}
			
			resolve(res);
		})
	},
	
}



import {openPage,imgDirtoUrl,getTagsText} from './utils/util.js'
const install = (Vue,app) => {
	let t_version = new Date().getTime();
	app = app.$options;
	initLifeCycle.onMyInitEvent();
	
	const mixin = {
		data(){ 
			return {
				city_no: app.globalData.city_no,
				city_name: app.globalData.city_name,
				t_version: '', //用于webview的版本生成
				host: app.globalData.host,
				h5Host: app.globalData.h5Host,
				host_api: app.globalData.host_api,
				imgHost: app.globalData.imgHost,
			}
		},
		onLoad() {
			initLifeCycle.onMyLoad(this,arguments);
		},
		onShow() {
			this.t_version = '_isMini=1&t='+t_version+'&_city_no='+app.globalData.city_no+'&_city_name='+app.globalData.city_name;//用于webview的版本生成
			initLifeCycle.onMyShow(this,arguments);
		},
		methods:{
			//标签转换为文字
			getTagsText,
			//获取图片地址
			imgDirtoUrl: imgDirtoUrl,
			goPage: openPage,
			isLogin(){
				// return true
				return app.globalData.userInfo&&app.globalData.token? true : false;
			},
			alertLogin(){//弹出登录提醒
				let that = this
				if(that.isLogin()==false){
					uni.showModal({
						title: '提示',
						content: '请先进行登录',
						success: function(rs){
							if(rs.confirm==true){
								let pages = getCurrentPages();
								let route_fullPath = pages[pages.length-1].$page.fullPath;
								app.globalData.restopen = route_fullPath;
								that.goPage('authorize/index','','redirectTo');
							}
							if(rs.cancel==true){
								//that.goPage(-1);
							}
						},
						fail: function(){
							//that.goPage(-1);
						}
					});
					throw Error("请登录");
				}
			},
			$toast(msg){
				uni.showToast({
					title: msg,
					duration: 1300,
					icon: 'none'
				})
			}
		}
	}
	
	Vue.mixin(mixin);
}

export default {
	install
}