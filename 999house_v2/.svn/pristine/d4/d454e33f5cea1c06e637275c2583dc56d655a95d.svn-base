let config = {
	baseUrl: '', // 请求的域名
	method: 'POST',
	// 设置为json，返回后会对数据进行一次JSON.parse()
	dataType: 'json',
	// showLoading: true, // 是否显示请求中的loading
	// loadingText: '请求中...', // 请求loading中的文字提示
	// loadingTime: 800, // 在此时间内，请求还没回来的话，就显示加载中动画，单位ms
	// originalData: false, // 是否在拦截器中返回服务端的原始数据
	// loadingMask: true, // 展示loading的时候，是否给一个透明的蒙层，防止触摸穿透
	// 配置请求头信息
	header: {
		'content-type': 'application/json;charset=UTF-8',
		"XX-Api-Version" : 1,
	},
}

let $http = null;
const getToken = (val='')=>{
	var token =''
	if(val !== null){
		if(val){
			token = val
		}else{
			var app = getApp();
			if(app&&app.globalData){
				token = app.globalData.token
			}
		}
	}else{//null为重置
		var app = getApp();
		if(app&&app.globalData){
			app.globalData.token = ''
		}
	}
	return token
}
const getSid = (val='')=>{
	var sid =''
	if(val !== null){
		if(val){
			sid = val
		}else{
			var app = getApp();
			if(app&&app.globalData){
				sid = app.globalData.sid
			}
		}
	}else{//null为重置
		var app = getApp();
		if(app&&app.globalData){
			app.globalData.sid = ''
		}
	}

	return sid
}

//请求拦截
let request_interceptor = (config) => {
	//头部信息
	config.header['XX-Token'] = getToken();
	config.header['XX-Sid'] = getSid();
	
	return config; // 如果return一个false值，则会取消本次请求
	// if(config.url == '/user/rest') return false; // 取消某次请求
}
//请求返回拦截
let response_interceptor = (res)=>{
	if (res.code == '50008') {
		let app = getApp();
		var pages = getCurrentPages()
		var currentPage = pages[pages.length-1]
		
		//白名单页面不进行弹窗
		if(app.globalData.whitePages.includes(currentPage.route)){
			uni.hideLoading()
			return res; 
		}
		//当前页面非白名单页面进行弹窗提醒//未登录提示操作
		uni.showModal({
			title: '提示',
			content: res.data.msg,
			showCancel: false,
			success (r) {
				if (r.confirm) { 
					//=========================//
					if(!app.wxAuthLogin){//未登录重新连接
						console.log('请在app.js封装wxAuthLogin用于调用WxAuth文件中的authLogin')
					}
					
					//微信登陆时执行用户久未操作断线重连
					/* app.wxAuthLogin().then(function(e){
						// 重新刷新此次失败的页面
						currentPage.onLoad(currentPage.options)
						currentPage.onShow()
					}) */
					
					app.logout()//账号登陆时退出登录
				 } 
			}
		})
		return false;
	} else{ 
		return res; //如果return false，则会调用Promise的reject回调，
	}
}

const install = (Vue, vm) => {
	let globalData = vm.$options.globalData;
	config.baseUrl = globalData.host_api;
	//配置自定义参数
	Vue.prototype.$u.http.setConfig(config);
	
	Vue.prototype.$u.http.interceptor.request = request_interceptor; // 请求拦截
	Vue.prototype.$u.http.interceptor.response = response_interceptor; // 返回拦截
	
	$http = Vue.prototype.$http = Vue.prototype.$u.http;
}

export default {
	install,
	$http,
	getToken,
	getSid
}