<template>
	<view class="content">
		<u-index-list :scrollTop="scrollTop" :index-list="indexList">
			<view v-for="(item, index) in indexList" :key="index">
				<u-index-anchor 
					:index="item" 
					:use-slot="index == 0 ? true : false"
					:custom-style="index == 0 ? { padding: 0 } : ''"
				>
				</u-index-anchor>
				<template v-if="index == 0">
					<view class="top">
						<view class="search">
							<u-search
								v-model="val"
								placeholder="搜索联系人" 
								shape="square"
								bg-color="rgba(245, 248, 254, 1)"
								search-icon-color="rgba(173, 173, 173, 1)"
								placeholder-color="rgba(173, 173, 173, 1)"
								color="#606266"
								:show-action="false"
								height="74"
								:input-style="{
									fontSize: '26rpx'
								}"
							>
							</u-search>
						</view>
						<i class="iconfont iconsaoma"></i>
					</view>
					<view class="top-item">
						<view class="list-cell">
							<view class="item">
								<view class="info">
									<img src="../../static/addF.png"><text>新的联系人</text>
								</view>
							</view>
							<i class="iconfont iconjiantou1-copy"></i>
						</view>
					</view>
				</template>
				<template v-if="index != 0">
					<view class="list-cell">
						<view class="item">
							<view class="info">
								<img src="../../static/addF.png"><text>666</text>
							</view>
						</view>
					</view>
				</template>
			</view>
		</u-index-list>
	</view>
</template>

<script>
	export default {
		data() {
			return {
				scrollTop: 0,
				val: '',
				indexList: [ "↑","A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U",
					"V", "W", "X", "Y", "Z"
				]
			}
		},
		components: {
			
		},
		watch: {
			val( newV ){
				const val = this.$u.trim(newV);
				
				if( val ){
					
				}
			}
		},
		computed: {
			haveVal() {
				const val = this.$u.trim(this.val);
				
				return val == '' ? false : true;
			}
		},
		onLoad(option) {
			
			
		},
		onShow() {
		
		},
		methods: {
			
		},
		onPageScroll(e) {
			this.scrollTop = e.scrollTop;
		}
	}

</script>

<style lang="scss" scoped>
	.content{
		width: 100%;
		
		/deep/.u-index-anchor{
			padding: 14rpx 34rpx;
		}
		
		/deep/.u-index-anchor--active{
			background-color: whitesmoke;
		}
	}
	
	.top{
		width: 100%;
		display: flex;
		align-items: center;
		box-sizing: border-box;
		padding: 34rpx 0 34rpx 32rpx;
		
		.search{
			flex: 1;
		}
		
		.iconfont{
			padding: 0 32rpx;
			font-size: 44rpx;
		}
	}
	
	.list-cell {
		display: flex;
		box-sizing: border-box;
		width: 100%;
		padding: 24rpx 34rpx;
		overflow: hidden;
		color: #323233;
		font-size: 14px;
		line-height: 24px;
		background-color: #fff;
		align-items: center;
		justify-content: space-between;
		
		.info{
			display: flex;
			align-items: center;
			
			img{
				width: 74rpx;
				height: 74rpx;
				border-radius: 50%;
				margin-right: 30rpx;
			}
			
			text{
				font-size: 30rpx;
			}
		}
		
	}
</style>
