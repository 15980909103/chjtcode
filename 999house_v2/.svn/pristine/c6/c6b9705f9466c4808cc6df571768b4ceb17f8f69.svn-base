let timeout = null;

var $api = (function() {

	/**
	 * JS引入其他组件
	 * 组件js与css放在同路径下
	 * components(路径): array/string
	 */
	const addComponents = (components) => {
		const type = typeof components;

		return new Promise((res, rej) => {
			if ((type == 'object' && isArray(components)) || type == 'string') {

				let doc = document;
				let versions = '?v=1.19';

				if (isArray(components)) {
					components.map((item, index) => {
						let script = doc.createElement('script');
						let css = doc.createElement('link');
						script.setAttribute("type", "text/javascript");
						script.setAttribute("src", item + '.js'+versions);
						css.setAttribute("rel", "stylesheet");
						css.setAttribute("type", "text/css");
						css.setAttribute("href", item + '.css'+versions);
						doc.getElementsByTagName("body")[0].appendChild(css);
						doc.getElementsByTagName("body")[0].appendChild(script);
					});

					
				} else {
					let script = doc.createElement('script');
					let css = doc.createElement('link');
					script.setAttribute("type", "text/javascript");
					script.setAttribute("src", components + '.js'+versions);
					css.setAttribute("rel", "stylesheet");
					css.setAttribute("type", "text/css");
					css.setAttribute("href", components + '.css'+versions);
					doc.getElementsByTagName("body")[0].appendChild(css);
					doc.getElementsByTagName("body")[0].appendChild(script);
				}

				let script2 = doc.createElement('script');
				script2.setAttribute("type", "text/javascript");
				script2.setAttribute("src", 'https://res.wx.qq.com/open/js/jweixin-1.3.2.js');
				doc.getElementsByTagName("head")[0].appendChild(script2);

				window.onload = () => {
					res();
				};
			} else {
				rej('param type err');
			}
		})
	}

	//标签转换为文字
	const getTagsText =  function(key,list){
		const tag = local.localGet('u-tag');
		let arr = []
		let update =0;
		
		if(typeof(list)!='object'){
			list = String(list)
			list = list.split(',')
		}
		
		for(let i in list){
			let item = list[i]
			if(tag[key]&&tag[key]){
				if(tag[key][item]){
					arr.push(tag[key][item]);
				}else{
					update = 1
				}
			}
		}
		
		if(update==1){
			local.localSet('u-tag-update',1);//下次进行更新
		}
		return arr
	}
	
	// 8-新房列表数据处理
	const createHouseList = ( data, type )=>{
		const list = data.list;
		const tag = local.localGet('u-tag');
		let allTag_update = 0;//标识是否存在新的用于下次标签更新
		let arr = [];
		
		for(let i in list){
			let item = list[i];
			const cover = ( item.detail_cover && item.logo ) ? 1 : 0;

			const obj = {
				id: item.id,
				type: 8,
				info: {
					id: item.id,
					name: item.name,
					tip: [],
					price: item.price,
					site: item.area_str + ' ' + item.business_area_str,
					area: item.built_area,
					lab: [],
					lng: item.lng,
					lat: item.lat,
				},
				cover: cover,
				img: [item.list_cover]
			};

			if(tag&&tag.estatesnew_sale_status&&tag.estatesnew_sale_status[item.sale_status]){
				obj.info.tip.push( tag.estatesnew_sale_status[item.sale_status] );
			}else{
				allTag_update = 1;
			}
			
			let house_purpose_arr = [];
			if(typeof(item.house_purpose)!='object'){
				item.house_purpose&&house_purpose_arr.push(item.house_purpose)
			}else{
				house_purpose_arr = item.house_purpose
			}
			house_purpose_arr.map( tip=>{
				if(tag&&tag.house_purpose&&tag.house_purpose[tip]){
					obj.info.tip.push( tag.house_purpose[tip] );
				}else{
					allTag_update = 1;
				}
			})
			item.feature_tag.map( tip=>{
				if(tag&&tag.feature_tag&&tag.feature_tag[tip]){
					obj.info.tip.push( tag.feature_tag[tip] );
				}else{
					allTag_update = 1;
				}
			})
			
			item.selling_point.map( point=>{
				let objP = {
					name: point.title
				}
				
				objP.type = point.type == 'hot' ? 0 : 1;
				
				obj.info.lab.push(objP);
			})
			
			arr.push(obj);
		}
		

		if( type == 1 && data.adv_list && data.adv_list.length > 0 ) {
			const ad = data.adv_list;
			let arr2 = [];
			let adIndex = 0;
			
			arr.map( (item,index)=>{
				arr2.push(item)
				
				let condition;
				
				if( (index+1)%6 == 3 ){
					condition = true;
				} else {
					condition = false;
				}
				// console.log(index+1,condition)
				
				if( ad[adIndex] && condition ){
					let adItem = ad[adIndex];
					
					if( ad[adIndex].type == 4 ) {
						let house_purpose = [];
						let obj = {
							id: adItem.id,
							type: adItem.type,
							info: {
								name: adItem.info.name,
								tip: [],
								estate_id:adItem.info.estate_id,
								cover:adItem.info.cover,
								price: adItem.info.price,
								site: adItem.info.site,
								area: adItem.info.area,
								lab: []
							},
							title: adItem.title,
							img:  adItem.img
						} 
						
						if(adItem.info && adItem.info.sale_status){
							if(tag&&tag.estatesnew_sale_status&&tag.estatesnew_sale_status[adItem.info.sale_status]){
								house_purpose.push( tag.estatesnew_sale_status[adItem.info.sale_status] );
							}else{
								allTag_update = 1;
							}
						}
						
						if( adItem.info.house_purpose.length > 0 ) {
							adItem.info.house_purpose.map( tip=>{
								if(tag&&tag.house_purpose&&tag.house_purpose[tip]){
									house_purpose.push( tag.house_purpose[tip] );
								}else{
									allTag_update = 1;
								}
							})
						}
						
						if( adItem.info.tip.length > 0 ) {
							adItem.info.tip.map( tip=>{
								if(tag&&tag.feature_tag&&tag.feature_tag[tip]){
									house_purpose.push( tag.feature_tag[tip] );
								}else{
									allTag_update = 1;
								}
							})
						}
						
						obj.info.tip = house_purpose;
						
						if( adItem.info.lab.length > 0 ){
							adItem.info.lab.map( point=>{
								let objP = {
									name: point.title
								}
								
								objP.type = point.type == 'hot' ? 0 : 1;
								
								obj.info.lab.push(objP);
							})
						}
						
						arr2.push( obj );
					} else {
						arr2.push( ad[adIndex] );
					}
					
					adIndex += 1;
				}
			});
			
			arr = arr2;
		}

		let local_allTag_update = this.$api.localGet('u-tag-update');
		
		if(local_allTag_update!=1&&allTag_update==1){
			this.$api.localSet('u-tag-update',1);//下次进行更新
		}
		
		// console.log(arr)
		return arr;
	}

	// 深度克隆
	const deepClone = (obj) => {
		if (typeof obj !== "object" && typeof obj !== 'function') {
			//原始类型直接返回
			return obj;
		}
		var o = isArray(obj) ? [] : {};
		for (let i in obj) {
			if (obj.hasOwnProperty(i)) {
				o[i] = typeof obj[i] === "object" ? deepClone(obj[i]) : obj[i];
			}
		}
		return o;
	}

	const isArray = (arr) => {
		return Object.prototype.toString.call(arr) === '[object Array]';
	}

	// 判断是否为空
	const isEmpty = (value) => {
		switch (typeof value) {
			case 'undefined':
				return true;
			case 'string':
				if (value.replace(/(^[ \t\n\r]*)|([ \t\n\r]*$)/g, '').length == 0) return true;
				break;
			case 'boolean':
				if (!value) return true;
				break;
			case 'number':
				if (0 === value || isNaN(value)) return true;
				break;
			case 'object':
				if (null === value || value.length === 0) return true;
				for (var i in value) {
					return false;
				}
				return true;
		}
		return false;
	}

	// 缓存
	const local = {
		localSet: (key,value,expires)=>{
			let params = { key, value, expires };
				if (expires) {
					// 记录何时将值存入缓存，秒级
					let nowtime = parseInt(Date.parse(new Date())/1000);
					var data = Object.assign(params, { startTime: nowtime});
					localStorage.setItem(key, JSON.stringify(data));
				} else {
					if (Object.prototype.toString.call(value) == '[object Object]') {
						value = JSON.stringify(value);
					}
					if (Object.prototype.toString.call(value) == '[object Array]') {
						value = JSON.stringify(value);
					}
					localStorage.setItem(key, value);
				}
		},
		localGet: (key) => {
			let item = localStorage.getItem(key);
			// 先将拿到的试着进行json转为对象的形式
			try {
				item = JSON.parse(item);
			} catch (error) {
				// eslint-disable-next-line no-self-assign
				item = item;
			}
			// 如果有startTime的值，说明设置了失效时间
			if (item && item.startTime) {
				let nowtime = parseInt(Date.parse(new Date())/1000);
				// 如果大于就是过期了，如果小于或等于就还没过期
				if (nowtime - item.startTime > item.expires) {
					localStorage.removeItem(name);
					return false;
				} else {
					return item.value;
				}
			} else {
				return item;
			}
		},
		localDel: (key) => {
			localStorage.removeItem(key);
		},
	}

	const session = {
		sessionSet: (name, val) => {
			val = JSON.stringify(val);
			sessionStorage.setItem(name, val);
		},
		sessionGet: (name) => {
			let item = sessionStorage.getItem(name);
			
			try {
				item = JSON.parse(item);
			} catch (error) {
				// eslint-disable-next-line no-self-assign
				item = item;
			}
			
			return item;
		}
	}

	// 跳转
	let goPageing = false;
	const goPage = (url, data, sub_path = '/9house/pages/', state) => {
		if(goPageing==true){
			return
		}
		goPageing = true
		setTimeout(()=>{
			goPageing = false
		},350)
		
		// 转跳详情清除缓存 防止封面页不显示
		if( url == 'houses/index.html' ){
			local.localDel('housesArr');
		}
		
		// tabBar组件回退上一页存储/加入state = 1 防止多重转跳记录
		if( url.indexOf( 'login.html' ) == -1 && state != 1 ){
			let tabBack = session.sessionGet('tabBack');
			
			if( tabBack && tabBack.length > 0 ){
				tabBack.push( window.location.href );
			} else {
				tabBack = [];
				tabBack.push( window.location.href );
			}
			
			session.sessionSet('tabBack', tabBack);
		}
		
		if ( data ) {
			if( url.indexOf('?') == '-1' ){
				url += '?';
			}else{
				url += '&';
			}
			
			let option = '';
			for (let i in data) {
				option += `${i}=${encodeURI(data[i])}&`;
			}

			option = option.substring(0, option.length - 1);

			url += option;
		}

		if(isMini == true){
			let miniUrl = '/pages/index/index'
			if(url.indexOf('http')==-1){
				miniUrl = '/pages/' + url.replace('.html','');
			}
			let switchTabUrls = [
				"/pages/index/index",
				"/pages/discover/index",
				"/pages/my/index"
			];
			
			//miniUrl = '/pages/instrument/calculator'
			if(switchTabUrls.includes(miniUrl)){
				wx.miniProgram.switchTab({url: miniUrl});
				return;
			}else{
				wx.miniProgram.navigateTo({url: miniUrl});
				return;
			}
		}
		
		if(url.indexOf('http')!=-1){
			window.location.href = url;
		}else{
			window.location.href = sub_path + url;
		}
	}

	// 文字去除空格
	const trim = (str, pos = 'both') => {
		if(!str){
			return '';
		}
		if (pos == 'both') {
			return str.replace(/^\s+|\s+$/g, "");
		} else if (pos == "left") {
			return str.replace(/^\s*/, '');
		} else if (pos == 'right') {
			return str.replace(/(\s*$)/g, "");
		} else if (pos == 'all') {
			return str.replace(/\s+/g, "");
		} else {
			return str;
		}
	}

	// html特殊字符转换
	const htmlEscape = (val) => {
		return val.replace(/[<>&"]/g, function(c) {
			return {
				'<': '&lt;',
				'>': '&gt;',
				'&': '&amp;',
				'"': '&quot;'
			} [c];
		});
	}

	// 删除url某项参数 返回 新url + 参数对象
	const funcUrlDel = (names) => {
		if (typeof(names) == 'string') {
			names = [names];
		}

		const loca = window.location;
		const obj = {}
		const arr = loca.search.substr(1).split("&");
		const newData = {};

		//获取参数转换为object
		for (var i = 0; i < arr.length; i++) {
			arr[i] = arr[i].split("=");
			obj[arr[i][0]] = arr[i][1];
		};

		//删除指定参数
		if (names) {
			for (let i = 0; i < names.length; i++) {
				delete obj[names[i]];
			}
		}

		// 排序
		Object.keys(obj).sort().map(key => {
			newData[key] = decodeURI(obj[key])
		})

		//重新拼接url
		const url = loca.origin + loca.pathname + "?" + JSON.stringify(newData).replace(/[\"\{\}]/g, "").replace(/\:/g,
			"=").replace(/\,/g, "&");

		return {
			url: url,
			option: newData
		};
	}

	var isMini = funcUrlDel().option&&funcUrlDel().option._isMini==1?true : false

	// 验证手机格式
	function mobile(value) {
		return /^1[23456789]\d{9}$/.test(value)
	}

	// 手机号加密
	const encryptPhone = (phone) => {
		if(!phone){
			return '';
		}
		phone = String(phone);

		return phone.replace(phone.substring(3, 7), "****");
	}

	/**
	 * 时间格式化
	 * timestamp时间戳
	 * fmt时间格式，可选。
	 * 默认为yyyy-mm-dd，年为"yyyy"，月为"mm"，日为"dd"，时为"hh"，分为"MM"，秒为"ss"，格式可以自由搭配
	 * 如： yyyy:mm:dd，yyyy-mm-dd，yyyy年mm月dd日，yyyy年mm月dd日 hh时MM分ss秒，yyyy/mm/dd/，MM:ss等组合
	 * 
	 */
	const timeFormat = (timestamp = null, fmt = 'yyyy-mm-dd') => {
		// 如果为null,则格式化当前时间
		if (!timestamp){
			timestamp = Number(new Date())
		}else{
			// 其他更多是格式化有如下:
			// yyyy:mm:dd|yyyy:mm|yyyy年mm月dd日|yyyy年mm月dd日 hh时MM分等,可自定义组合
			if (!(typeof timestamp === 'number' && !isNaN(timestamp))){return timestamp};
			timestamp = parseInt(timestamp);
		}
		
		// 判断用户输入的时间戳是秒还是毫秒,一般前端js获取的时间戳是毫秒(13位),后端传过来的为秒(10位)
		if (timestamp.toString().length == 10) timestamp *= 1000;
		let date = new Date(timestamp);
		let ret;
		let opt = {
			"y+": date.getFullYear().toString(), // 年
			"m+": (date.getMonth() + 1).toString(), // 月
			"d+": date.getDate().toString(), // 日
			"h+": date.getHours().toString(), // 时
			"M+": date.getMinutes().toString(), // 分
			"s+": date.getSeconds().toString() // 秒
			// 有其他格式化字符需求可以继续添加，必须转化成字符串
		};
		for (let k in opt) {
			ret = new RegExp("(" + k + ")").exec(fmt);
			if (ret) {
				fmt = fmt.replace(ret[1], (ret[1].length == 1) ? (opt[k]) : (opt[k].padStart(ret[1].length, "0")))
			};
		};
		return fmt;
	}

	let is_alert_msg = 0;
	const getPosition = (map) => {
		if (!map) {
			console.log('请传入地图实例')
		}
		
		return new Promise(function(resolve, reject) {
			if (!map) {
				resolve('')
				return;
			}

			map.plugin('AMap.Geolocation', function() {
				
				let geolocation = new AMap.Geolocation({
					enableHighAccuracy: true, //是否使用高精度定位，默认:true
					timeout: 100, //超过10秒后停止定位，默认：无穷大
					maximumAge: 0, //定位结果缓存0毫秒，默认：0
					convert: true, //自动偏移坐标，偏移后的坐标为高德坐标，默认：true
					showButton: true, //显示定位按钮，默认：true
					buttonPosition: 'LB', //定位按钮停靠位置，默认：'LB'，左下角
					buttonOffset: new AMap.Pixel(10,
						20), //定位按钮与设置的停靠位置的偏移量，默认：Pixel(10, 20)
					showMarker: true, //定位成功后在定位到的位置显示点标记，默认：true
					showCircle: true, //定位成功后用圆圈表示定位精度范围，默认：true
					panToLocation: false, //定位成功后将定位到的位置作为地图中心点，默认：true
					zoomToAccuracy: true //定位成功后调整地图视野范围使定位位置及精度范围视野内可见，默认：false
				});
				
				map.addControl(geolocation);
				
				geolocation.getCurrentPosition(function(status, result) {
					if (status == 'complete') {
						// that.onComplete(result)
						// console.log(result)
						var geocoder = new AMap.Geocoder({
							city: "010", //城市设为北京，默认：“全国” 
							radius: 1000 //范围，默认：500
						});
						var lnglat = [result.position.lng, result.position.lat];
						geocoder.getAddress(lnglat, function(status, result) {
							if (status === 'complete' && result.regeocode) {
								resolve(result.regeocode)
							} else {
								console.log('根据经纬度查询地址失败')
								resolve('')
							}
						});
					} else {
						if(status == 'error'){
							if(result.message&&result.message.indexOf('permission denied')!=-1){
								if(is_alert_msg==0){
									alert('抱歉地图定位失败，请检查相应权限，将切换为默认城市厦门');
									is_alert_msg = 1;
								}
								
								resolve('')
							}
						}
						console.log(result)
						//that.onError(result)
					}
				});
				
				// AMap.Event.addListener(geolocation, 'complete', that.onComplete); //返回定位信息
				// AMap.Event.addListener(geolocation, 'error', that.onError); //返回定位出错信息
				// this.mapMoveend()
			});
		})
	}

	const debounce = (func, wait = 500, immediate = false)=>{
		// 清除定时器
		if (timeout !== null) clearTimeout(timeout);
		// 立即执行，此类情况一般用不到
		if (immediate) {
			var callNow = !timeout;
			timeout = setTimeout(function() {
				timeout = null;
			}, wait);
			if (callNow) typeof func === 'function' && func();
		} else {
			// 设置定时器，当最后一次操作后，timeout不会再被清除，所以在延时wait毫秒后执行func回调方法
			timeout = setTimeout(function() {
				typeof func === 'function' && func();
			}, wait);
		}
	}

	return {
		trim,
		mobile,
		goPage,
		isEmpty,
		isArray,
		debounce,
		deepClone,
		timeFormat,
		funcUrlDel,
		htmlEscape,
		encryptPhone,
		addComponents,
		getPosition,
		createHouseList,

		localSet: local.localSet,
		localGet: local.localGet,
		localDel: local.localDel,
		sessionSet: session.sessionSet,
		sessionGet: session.sessionGet,
		getTagsText
	};
}());


// 公共方法映射到Vue原型链;
Vue.prototype.$api = $api;



